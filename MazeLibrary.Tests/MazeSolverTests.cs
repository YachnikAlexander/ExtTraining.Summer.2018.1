using System;
using NUnit.Framework;

namespace MazeLibrary.Tests
{
    [TestFixture]
    public class MazeSolverTests
    {
        int[] startXs = { 3, 1, 10, 1 }; // строка

        int[] startYs = { 5, 5, 11, 11 }; // столбец

        int[][,] sourceData = new int[][,]
       {
            new int[,]
            {
                { -1, -1, -1, -1, -1, -1 },
                {  0,  0,  0, -1, -1, -1 },
                { -1,  0, -1, -1, -1, -1 },
                { -1,  0, -1,  0,  0,  0 },
                { -1,  0,  0,  0, -1, -1 },
                { -1, -1, -1, -1, -1, -1 }
            },
            new int[,]
            {
                { -1, -1, -1, -1, -1, -1 },
                {  0,  0,  0, -1,  0,  0 },
                { -1,  0, -1, -1,  0, -1 },
                { -1,  0, -1,  0,  0, -1 },
                { -1,  0,  0,  0, -1, -1 },
                { -1, -1, -1, -1, -1, -1 }
            },
            new int[,]
            {
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                {  0,  0, -1,  0,  0,  0,  0,  0, -1,  0,  0, -1 },
                { -1,  0, -1,  0, -1, -1,  0,  0, -1, -1,  0, -1 },
                { -1,  0, -1,  0,  0, -1,  0,  0,  0,  0,  0, -1 },
                { -1,  0, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1 },
                { -1,  0, -1,  0,  0, -1,  0, -1,  0,  0,  0, -1 },
                { -1,  0, -1,  0, -1, -1,  0,  0,  0, -1,  0, -1 },
                { -1,  0, -1,  0,  0,  0,  0, -1, -1, -1,  0, -1 },
                { -1,  0, -1,  0, -1,  0,  0, -1,  0, -1,  0, -1 },
                { -1,  0, -1, -1, -1, -1,  0, -1,  0, -1,  0, -1 },
                { -1,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            },
            new int[,]
            {
                { -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1,  0, -1,  0,  0,  0,  0,  0, -1, -1,  0,  0 },
                { -1,  0, -1,  0, -1, -1,  0,  0, -1, -1,  0, -1 },
                { -1,  0, -1,  0,  0, -1,  0,  0,  0,  0,  0, -1 },
                { -1,  0, -1, -1,  0, -1, -1, -1, -1, -1,  0, -1 },
                { -1,  0, -1,  0,  0, -1,  0, -1,  0,  0,  0, -1 },
                { -1,  0, -1,  0, -1, -1,  0,  0,  0, -1,  0, -1 },
                { -1,  0, -1,  0,  0,  0,  0, -1, -1, -1,  0, -1 },
                { -1,  0, -1,  0, -1,  0,  0, -1,  0, -1,  0, -1 },
                { -1,  0, -1, -1, -1, -1,  0, -1,  0, -1,  0, -1 },
                { -1,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            }
       };

        int[][,] result = new int[][,]
         {
            new int[,]
            {
                { -1, -1, -1, -1, -1, -1 },
                { 10,  9,  0, -1,  0, -1 },
                { -1,  8, -1, -1,  0, -1 },
                { -1,  7, -1,  3,  2,  1 },
                { -1,  6,  5,  4, -1, -1 },
                { -1, -1, -1, -1, -1, -1 }
            },
            new int[,]
            {
                { -1, -1, -1, -1, -1, -1 },
                { 12, 11,  0, -1,  2,  1 },
                { -1, 10, -1, -1,  3, -1 },
                { -1,  9, -1,  5,  4, -1 },
                { -1,  8,  7,  6, -1, -1 },
                { -1, -1, -1, -1, -1, -1 }
            },
            new int[,]
            {
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                {  31, 30, -1,  0,  0,  0,  0,  0, -1,  0,  0, -1 },
                { -1,  29, -1,  0, -1, -1,  0,  0, -1, -1,  0, -1 },
                { -1,  28, -1,  0,  0, -1,  0,  0,  0,  0,  0, -1 },
                { -1,  27, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1 },
                { -1,  26, -1,  0,  0, -1,  0, -1, 9, 8, 7, -1 },
                { -1,  25, -1,  0, -1, -1, 12, 11, 10, -1, 6, -1 },
                { -1,  24, -1,  0,  0,  0, 13, -1, -1, -1, 5, -1 },
                { -1,  23, -1,  0, -1,  0, 14, -1,  0, -1, 4, -1 },
                { -1, 22, -1, -1, -1, -1, 15, -1,  0, -1, 3, -1 },
                { -1, 21, 20, 19, 18, 17, 16, -1,  0,  0, 2,  1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            },
            new int[,]
            {
                { -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, 29, -1,  0,  0,  0,  0,  0, -1, -1, 2, 1 },
                { -1, 28, -1,  0, -1, -1,  0,  0, -1, -1, 3, -1 },
                { -1, 27, -1,  0,  0, -1,  0,  0,  0,  0, 4, -1 },
                { -1, 26, -1, -1,  0, -1, -1, -1, -1, -1, 5, -1 },
                { -1, 25, -1,  0,  0, -1,  0, -1, 8, 7, 6, -1 },
                { -1, 24, -1,  0, -1, -1, 11, 10, 9, -1,  0, -1 },
                { -1, 23, -1,  0,  0,  0, 12, -1, -1, -1,  0, -1 },
                { -1, 22, -1,  0, -1,  0, 13, -1,  0, -1,  0, -1 },
                { -1, 21, -1, -1, -1, -1, 14, -1,  0, -1,  0, -1 },
                { -1, 20, 19, 18, 17, 16, 15, -1,  0,  0,  0, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            }
         };

        [Test]
        public void MazeSolverConstructor_WithNull_ThrowsArgumentNullException()
            => Assert.Throws<ArgumentNullException>(() => new MazeSolver(null, 1, 2));

        [Test]
        public void MazeSolverConstructor_WithInvalidStartIndexX_ThrowsArgumentException()
            => Assert.Throws<ArgumentException>(() => new MazeSolver(sourceData[1], -12, 2));

        [Test]
        public void MazeSolverConstructor_WithInvalidStartIndexY_ThrowsArgumentException()
            => Assert.Throws<ArgumentException>(() => new MazeSolver(sourceData[1], 0, -2));

        [Test]
        public void PassMaze_SuccessfulTests()
        {
            for (int i = 0; i < sourceData.Length; i++)
            {
                MazeSolver solver = new MazeSolver(sourceData[i], startXs[i], startYs[i]);

                solver.PassMaze();

                Assert.AreEqual(MatrixAreEquals(solver.MazeWithPass(), result[i]), true);

            }
        }

        private static bool MatrixAreEquals(int[,] lhs, int[,] rhs)
        {
            int length = (int)Math.Sqrt(lhs.Length);
            for (int i = 0; i < length; i++)
            {
                for(int j = 0; j < length; i++)
                {
                    if(lhs[i,j] != rhs[i, j])
                    {
                        return false;
                    }
                }
            }
            return true;
        } 
    }
}
